#!/usr/bin/env ruby
gem 'minitest', '>= 5.0.0'
require 'minitest/autorun'
require_relative 'dominoes'

# Test data version:
# <%= sha1 %>
class DominoesTest < Minitest::Test
<% test_cases.each do |test_case| %>
  def <%= test_case.test_name %>
    <%= test_case.skipped %>
    <%= test_case.workload %>
  end

<% end %>
<%= IO.read(XRUBY_LIB + '/bookkeeping.md') %>
  def test_bookkeeping
    skip
    assert_equal <%= version.next %>, BookKeeping::VERSION
  end

  def assert_correct_chain(input_dominoes, output_chain)
    refute_nil output_chain, "There should be a chain for #{input_dominoes}"

    input_normal = input_dominoes.map(&:sort).sort
    output_normal = output_chain.map(&:sort).sort
    assert_equal input_normal, output_normal,
      'Dominoes used in the output must be the same as the ones given in the input'

    output_chain.each_cons(2).with_index { |(d1, d2), i|
      _, d1_right = d1
      d2_left, _ = d2
      assert_equal d1_right, d2_left,
        "In chain #{output_chain}, right end of domino #{i} (#{d1}) and left end of domino #{i + 1} (#{d2}) must match"
    }

    return if output_chain.empty?

    first_domino = output_chain.first
    last_domino = output_chain.last
    d1_left, _ = first_domino
    _, d2_right = last_domino
    assert_equal d1_left, d2_right,
      "In chain #{output_chain}, left end of first domino (#{first_domino}) and right end of last domino (#{last_domino}) must match"
  end
end
